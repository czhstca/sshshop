<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.chipmore</groupId>
  <artifactId>ssh_shop</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  
    
  <!-- 定义属性,指定jar包的版本 -->
  <properties>
  	<spring.version>4.2.4.RELEASE</spring.version>
  	<hibernate.version>5.0.7.Final</hibernate.version>
  	<struts.version>2.3.24</struts.version>
  </properties>
  
  
  <!-- 版本锁定：指定项目中jar包依赖的版本 (项目中最常使用)-->
  <dependencyManagement>
  	<dependencies>
  		<!-- 通过版本锁定，指定spring下的这些依赖jar包的版本为4.2.4.RELEASE,这些jar包就不会用 struts2-spring-plugin下的2.3.24版本了-->
  		<dependency>
  			<groupId>org.springframework</groupId>
  			<artifactId>spring-beans</artifactId>
  			<version>${spring.version}</version>
  		</dependency>
  		<dependency>
  			<groupId>org.springframework</groupId>
  			<artifactId>spring-core</artifactId>
  			<version>${spring.version}</version>
  		</dependency>
  		<dependency>
  			<groupId>org.springframework</groupId>
  			<artifactId>spring-web</artifactId>
  			<version>${spring.version}</version>
  		</dependency>
  	</dependencies>
  </dependencyManagement>
  
  
  
  
  <!-- 如果有出现不同jar包有同时依赖一个jar包多个版本的情况，MAVEN有自己的两个调解原则 -->
  <!-- 1.谁先在pom.xml中声明，最终依赖的jar包就是谁依赖的那个版本 -->
  <!-- 2.谁路径比较近就用谁的版本，比如直接依赖的优先级别高于本地依赖的级别 (如自己导入Spring-bean的jar包优先级肯定高于struts2-spring-plugin依赖的spring-bean的jar包) -->
  <dependencies>
  
  	<dependency>
	    <groupId>javax.servlet</groupId>
    	<artifactId>servlet-api</artifactId>
    	<version>2.5</version>
	    <scope>provided</scope>
	</dependency>
	
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
    	<artifactId>javax.servlet.jsp-api</artifactId>
    	<version>2.3.1</version>
    	<scope>provided</scope>
	</dependency>
	
    <dependency>
  		<groupId>org.apache.struts</groupId>
  		<artifactId>struts2-spring-plugin</artifactId>
  		<version>${struts.version}</version>
  		<!-- 通过手动指定排除struts2-spring-plugin中的spring-bean的jar包依赖,就会自动使用下面的4.2.4的spring-bean的jar包了 -->
<!--   		<exclusions>
  			<exclusion>
  				<artifactId>spring-beans</artifactId>
  				<groupId>org.springframework</groupId>
  			</exclusion>
  		</exclusions> -->
    </dependency>
    
        <dependency>
  		<groupId>org.apache.struts</groupId>
  		<artifactId>struts2-json-plugin</artifactId>
  		<version>${struts.version}</version>
    </dependency>
    
    
    <dependency>
    	<groupId>org.springframework</groupId>
    	<artifactId>spring-context</artifactId>
    	<version>${spring.version}</version>
    </dependency>
    
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>${spring.version}</version>
	</dependency>
    
    <dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-orm</artifactId>
		<version>${spring.version}</version>
	</dependency>
	
	<dependency>
	    <groupId>org.apache.struts</groupId>
	    <artifactId>struts2-core</artifactId>
	    <version>${struts.version}</version>
	</dependency>
	
	<dependency>
	    <groupId>org.hibernate</groupId>
	    <artifactId>hibernate-core</artifactId>
	    <version>${hibernate.version}</version>
	</dependency>
	
    
    <dependency>  
        <groupId>c3p0</groupId>  
        <artifactId>c3p0</artifactId>  
        <version>0.9.1.2</version>  
    </dependency> 
    
    <dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	    <version>5.1.6</version>
	</dependency>
	
	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-log4j12</artifactId>
	    <version>1.7.2</version>
	</dependency>
	
	<dependency>  
		<groupId>org.aspectj</groupId>  
		<artifactId>aspectjrt</artifactId>  
		<version>1.8.0</version>  
	</dependency>
	  
	<dependency>  
		<groupId>org.aspectj</groupId>  
		<artifactId>aspectjweaver</artifactId>  
		<version>1.8.0</version>  
	</dependency> 
	
	<!-- javamail的2个jar包 -->
	<dependency>
	    <groupId>javax.activation</groupId>
	    <artifactId>activation</artifactId>
	    <version>1.1.1</version>
	</dependency>
	
	<dependency>
	    <groupId>com.sun.mail</groupId>
	    <artifactId>javax.mail</artifactId>
	    <version>1.5.6</version>
	</dependency>
  </dependencies>
  
    
  
 <build> 
	  <plugins>
	  		<!-- 添加MAVEN编译时的jdk版本插件 -->
	  		<plugin>
	  			<groupId>org.apache.maven.plugins</groupId>
	  			<artifactId>maven-compiler-plugin</artifactId>
	  			<version>3.1</version>
	  			<configuration>
	  				<source>1.7</source>
	  				<target>1.7</target>
	  				<encoding>UTF-8</encoding>
	  			</configuration>
	  		</plugin>

	  
	    	<!-- 添加MAVEN集成TOMCAT7的插件 -->
	  		<plugin>  
	            <groupId>org.apache.tomcat.maven</groupId>  
	            <artifactId>tomcat7-maven-plugin</artifactId>  
	            <version>2.2</version>  
	            <configuration>  
	                <path>/ssh_shop</path>  
	                <port>8080</port>  
	                <uriEncoding>UTF-8</uriEncoding>  
	                <server>tomcat7</server>  
	            </configuration>  
	            <executions>  
	                <execution>  
	                    <phase>package</phase>  
	                    <goals>  
	                        <goal>run</goal>  
	                    </goals>  
	                </execution>  
	            </executions>  
	        </plugin> 
       </plugins>
 </build>
</project>